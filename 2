add_library('minim')
import os, random 

W = 11            # number of cells for W & H
H = 15
D = 50          # in pixels 

path = os.getcwd()

player = Minim(this)

score = 0


class Player:                       #class Player contains x,y position and the draw function
    def __init__(self, x, img):               
        self.x = x
        self.y = H-2
        self.img = loadImage(path + "/images/" + img)
        
        
    def draw(self):
        image(self.img, self.x*D, self.y*D, D, D)        
        
        
class Hedgehog:                    #class Hedgehog contains x,y position and the draw function
    def __init__(self, x, img):               
        self.x = x
        self.y = H-1
        self.alive = True
        self.img = loadImage(path + "/images/" + img)
        
    def draw(self):
        image(self.img, self.x*D, (H-1)*D, D, D)
          

class Alien:                           #class Player contains x,y position and the draw function

    def __init__(self, x, img):                  # x, y are for rows and columns
        self.x = x
        self.vx = 1
        self.y = 0
        self.img = loadImage(path + "/images/" + img)
        
    def move(self):                    # alien movement
        self.y += 1
        if score < 10:               # move straight down before raw score is 10 (printed score 100)
            self.x = self.x
        else:
            self.x = self.x+self.vx    # start moving diagonally once 10 aliens are killed 
        
        
    def draw(self):                                        
        image(self.img, self.x*D, self.y*D, D, D)
        
class Shoot:                         # class shoot is for the bullet 
    def __init__(self, x, y, img):
        self.x = x
        self.y = y
        self.img = loadImage(path + "/images/" + img)
        self.createTime = millis()
        
    def move(self):                # bullet moves upward by one cell at a time until it hits an alien or moves outside the board
        self.y -= 1
        
        
    def draw(self):
        image(self.img, self.x*D, self.y*D, D, D) 

allowedHedgehogs = range(1, W) # a row of hedgehogs in the beginning to the game 

class Game: 
    def __init__(self): 
        self.alienList = []
        self.shootList = []
        self.hedgehogList = []
        self.hedgehog = Hedgehog(allowedHedgehogs, "hedge.png")
        self.player = Player(W/2, "player1.png")
        self.spacepressed = False
        self.bullets = []
        self.alienkill = player.loadFile(path + "/sounds/kill.mp3")
        self.shoot = player.loadFile(path + "/sounds/shoot.mp3")
        self.hedgehog = player.loadFile(path + "/sounds/hedgehog.mp3")
        self.gameover = player.loadFile(path + "/sounds/gameover.mp3")
        self.bgmusic = player.loadFile(path + "/sounds/bgmusic.mp3")       #backgroundmusic
        self.bgmusic.loop()
        self.alive = True
        self.bulletavailable = 5            # 5 initial bullets, and will keep adding on as time pass
                                            # to limit the number of bullets the player has 
        self.backgroundimage = loadImage(path + "/images/background.png")
        level = "1"
        
        for i in range(W):
            self.hedgehogList.append(Hedgehog(i, "hedge.png"))     # a row of hedgehogs in the beginning to the game
            
            
    def check(self):
        global score
        # Alien, Shoot touch each other, they both should disappear 
        for a in self.alienList:
            bToDelete = []
            for b in self.shootList:
                if a.x == b.x and (b.y == a.y or b.y == a.y-1):
                    self.alienList.remove(a)                       # removed alien
                    score += 1                                     # add score
                    self.bulletavailable += 2                      # add more bullets for player
                    self.alienkill.rewind()
                    self.alienkill.play()
                    bToDelete.append(b)

                    
                    
            for i in bToDelete:
                self.shootList.remove(i)                           # removed bullet
                

        if score > 0:                      # when raw score is greater than 10, the aliens start moving diagonally
            for a in self.alienList:
                if a.x == 0:                # boucning off the walls
                    a.vx = 1
                elif a.x == W-1:
                    a.vx = -1
                    
        # Alien, Player touch, the game should end
        for a in self.alienList:
            if a.x == self.player.x and a.y == self.player.y:
                self.alive = False
                return
        
        # Alien, Hedgehog touch, both should be removed
        for a in self.alienList:
            for h in self.hedgehogList:
                if a.x == h.x and a.y == h.y:                    
                    self.alienList.remove(a)
                    self.hedgehogList.remove(h)
                    self.hedgehog.rewind()
                    self.hedgehog.play()
                    break
            else:
                if a.y == H-1:                        # if the alien passes an empty cell where the hedgehog used to be, a random hedgehog is removed
                    self.hedgehogList.remove(random.choice(self.hedgehogList))       # to incentivise the player to keep protecting the column
                
            if len(self.hedgehogList) == 0:           # the game ends if there are no more hedgehogs 
                self.alive = False
                return
            
        
    
    def move(self):
        for i in self.alienList:
            i.move()
            if i.y >= H:                     # removes the alien if it passes the board
                self.alienList.remove(i) 
        
        for i in self.shootList:
            # If a bullet has an alien on top of it, it shouldn't move
            i.move()
            if i.y < 0:                      # remove the bullet if it passes the board
                self.shootList.remove(i) 
        
        self.check()
                
        # Generate New Aliens
        l = list(range(W))
        random.shuffle(l)
        for i in range(random.randint(0, min((score//50 + 1), W))):
            self.alienList.append(Alien(l[i], "alien1.png"))
            
    
    
        
    def draw(self):
        clear()
        image(self.backgroundimage, 0, 0, W*D, H*D)      # background image


        for i in self.shootList:               # draws bullets
            i.draw()
        for i in self.alienList:               # draws aliens
            i.draw()
        for i in self.hedgehogList:            # draws hedghogs
            i.draw()
        self.player.draw()                     # draws player
        if score < 10:                         # printed level changes when the raw score change
            level = "1"
        elif score >= 10 and score < 20:
            level = "2"
        else:
            level = "3"
        
        textAlign(LEFT)
        
        fill(255)
        rect(0, H*D, W*D, H*D+20)
        # display SCORE
        fill(0)
        textSize(18)
        text("Score: " + str(score * 10), W, H*D + 20)                 # displayed score is *10 the raw score
        text("Level: " + level, W+150, H*D +20)
        text("Available Bullets: " + str(game.bulletavailable), W+310, H*D + 20)       # tells the player how many bullets they have
        
        
game = Game()

def setup():
     size(W*D, H*D+30)
     
def draw():
    if game.alive == True:
        if score < 10:
            if frameCount%60 == 0:
                game.move()
                game.draw()
            
        elif score < 20:              # speed of the aliens increase
            if frameCount%50 == 0:
                game.move()
                game.draw()
            
        elif score >= 20:             # speed of the aliens increase
            if frameCount%40 == 0:
                game.move()
                game.draw()
    else:
        # after the game ends it will display a message that 'Game Over' and the score that the player have received
        textSize(40)
        textAlign(CENTER, CENTER)
        fill(0)
        text("Game Over\nYour Score is " + str(score*10) + "\nClick to play again", 0, 0, W*D+2, H*D)               # to create a fill and outline effect on the message printed on the screen
        text("Game Over\nYour Score is " + str(score*10) + "\nClick to play again", 0, 0, W*D-2, H*D)
        text("Game Over\nYour Score is " + str(score*10) + "\nClick to play again", 0, 0, W*D, H*D+2)
        text("Game Over\nYour Score is " + str(score*10) + "\nClick to play again", 0, 0, W*D, H*D-2)
        fill(255)
        text("Game Over\nYour Score is " + str(score*10) + "\nClick to play again", 0, 0, W*D, H*D)
        game.gameover.play()
    
    
def keyPressed():
    if keyCode == LEFT:            # player is moved left when left key is pressed
        if game.player.x > 0:
            game.player.x -= 1
            game.check()
            game.draw()
    elif keyCode == RIGHT:            # player is moved right when right key is pressed
        if game.player.x < W-1:
            game.player.x += 1
            game.check()
            game.draw()
    elif key == " ":                  # player can shoot bullets when there are available bullets and when the space bar is pressed
        if game.bulletavailable > 0:
            game.shootList.append(Shoot(game.player.x, game.player.y-1, "bullet.png"))
            game.check()
            game.draw()
            game.spacepressed = True
            game.shoot.rewind()
            game.shoot.play()
            game.bulletavailable += -1
        else:
            None
    elif key == "a":
            print(game.hedgehogList)


                
def mouseClicked():             # when the mouse is clicked anywhere on the board, the game should restart
    global game, score
    if game.alive == False:
        score = 0
        game = Game()
