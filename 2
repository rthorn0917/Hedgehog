add_library('minim')
import os, random 

W = 10            # number of cells for W & H
H = 15
D = 50          # in pixels 

path = os.getcwd()

player = Minim(this)

score = 0


class Player:
    def __init__(self, x, img):               
        self.x = x
        self.y = H-2
        self.img = loadImage(path + "/images/" + img)
        
        
    def draw(self):
        #fill(0, 0, 128)
        image(self.img, self.x*D, self.y*D, D, D)        # player is a circle for now
        
        
class Hedgehog:
    def __init__(self, x, img):               
        self.x = x
        self.y = H-1
        self.alive = True
        self.img = loadImage(path + "/images/" + img)
        
    def draw(self):
        #fill(0, 255, 0)
        image(self.img, self.x*D, (H-1)*D, D, D)        # hedgehogs are circles for now
        


def indexSmallestLessThan(n, arr):
    for i, m in enumerate(arr):
        if m > n:
            return i    

class Alien:
    #typeByScore = [10, 20, 40, 70, 110] 
    #typeList = [[1], [1,2], [1,3], [2,3], [3]]
    
    def __init__(self, x, img):                  # x, y are for rows and columns
        self.x = x
        self.vx = 1
        self.y = 0
        #self.health = random.choice(Alien.typeList[indexSmallestLessThan(score, Alien.typeByScore)])
        self.img = loadImage(path + "/images/" + img)
        
    def move(self):
        self.y += 1
        if score == 10:
            self.x = self.x
        else:
            self.x = self.x+self.vx

                
        
    def draw(self):                                        # alien is a rectangle for now
        image(self.img, self.x*D, self.y*D, D, D)
        
class Shoot: 
    def __init__(self, x, y, img):
        self.x = x
        self.y = y
        self.img = loadImage(path + "/images/" + img)
        self.createTime = millis()
        
    def move(self):
        self.y -= 1
        
        
    def draw(self):
        #fill(0, 255, 255)
        image(self.img, self.x*D, self.y*D, D, D) 

allowedHedgehogs = range(1, W) # a row of hedgehogs in the beginning to the game 

class Game: 
    def __init__(self): 
        self.alienList = []
        self.shootList = []
        self.hedgehogList = []
        self.hedgehog = Hedgehog(allowedHedgehogs, "hedge.png")
        self.player = Player(W/2, "player1.png")
        self.aliencolo = ""
        self.spacepressed = False
        self.bullets = []
        self.alienkill = player.loadFile(path + "/sounds/kill.mp3")
        self.shoot = player.loadFile(path + "/sounds/shoot.mp3")
        self.hedgehog = player.loadFile(path + "/sounds/hedgehog.mp3")
        self.gameover = player.loadFile(path + "/sounds/gameover.mp3")
        self.bgmusic = player.loadFile(path + "/sounds/bgmusic.mp3")
        self.bgmusic.loop()
        self.alive = True
        self.bulletavailable = 5



        
        for i in range(W):
            self.hedgehogList.append(Hedgehog(i, "hedge.png"))
            
            
    def end(self):
        pass        
            
    def check(self):
        global score
        # Alien, Shoot
        for a in self.alienList:
            bToDelete = []
            for b in self.shootList:
                if a.x == b.x and (b.y == a.y or b.y == a.y-1):
                    #a.health -= 1
                    #if a.health == 0:
                    self.alienList.remove(a)
                    score += 1
                    self.bulletavailable += 2
                    self.alienkill.rewind()
                    self.alienkill.play()
                    bToDelete.append(b)

                    
                    
            for i in bToDelete:
                self.shootList.remove(i)
                

        if score > 0:
            for a in self.alienList:
                if a.x == 0:
                    a.vx = 1
                elif a.x == W-1:
                    a.vx = -1
                    
        # Alien, Player
        for a in self.alienList:
            if a.x == self.player.x and a.y == self.player.y:
                self.end()
                break
        
        # Alien, Hedgehog
        for a in self.alienList:
            for h in self.hedgehogList:
                if a.x == h.x and a.y == h.y:
                    self.alienList.remove(a)
                    self.hedgehogList.remove(h)
                    self.hedgehog.rewind()
                    self.hedgehog.play()
                    ## Animation
                    if len(self.hedgehogList) == 0:
                        self.end()
                        self.alive = False
                        return
    
        for a in self.alienList:
            if a.x == self.player.x and a.y == self.player.y:
                self.alive = False
                return
                
    
    def move(self):
        for i in self.alienList:
            i.move()
            if i.y >= H:
                self.alienList.remove(i) #### WARNING
        
        for i in self.shootList:
            # If a bullet has an alien on top of it, it shouldn't move
            i.move()
            if i.y < 0:
                self.shootList.remove(i) #### WARNING
        
        self.check()
                
        # Generate New Aliens
        l = list(range(W))
        random.shuffle(l)
        for i in range(random.randint(0, min((score//50 + 1), W))):
            if score == 0:
                self.aliencolo = "alien1.png"
            elif score == 10:
                self.aliencolo = "alien2.png"
            elif score == 20:
                self.aliencolo = "alien3.png"
            self.alienList.append(Alien(l[i], self.aliencolo))
            
    
    
        
    def draw(self):
        clear()

        for i in self.shootList:
            i.draw()
        for i in self.alienList:
            i.draw()
        for i in self.hedgehogList:
            i.draw()
        self.player.draw()
        
        fill(255)
        rect(0, H*D, W*D, H*D+20)
        # display SCORE
        fill(0)
        textSize(18)
        text("Score: " + str(score * 10), W, H*D + 20)
        text("Available Bullets: " + str(game.bulletavailable), W+310, H*D + 20)
        
        
game = Game()

def setup():
     size(W*D, H*D+30)
     
def draw():
    if game.alive == True:
        if score < 10:
            if frameCount%60 == 0:
                game.move()
                game.draw()
            
        elif score < 20:
            if frameCount%50 == 0:
                game.move()
                game.draw()
            
        elif score >= 20:
            if frameCount%40 == 0:
                game.move()
                game.draw()
    else:
        fill(255, 255, 255) 
        textSize(40)
        text("Game over", 50, 50)
        game.gameover.play()
    
    
def keyPressed():
    if keyCode == LEFT:
        if game.player.x > 0:
            game.player.x -= 1
            game.check()
            game.draw()
    elif keyCode == RIGHT:
        if game.player.x < W-1:
            game.player.x += 1
            game.check()
            game.draw()
    elif key == " ":
        if game.bulletavailable > 0:
            game.shootList.append(Shoot(game.player.x, game.player.y-1, "bullet.png"))
            game.check()
            game.draw()
            game.spacepressed = True
            game.shoot.rewind()
            game.shoot.play()
            game.bulletavailable += -1
        else:
            None

                
def mouseClicked():
    global game
    if game.alive == False:
        game = Game()
